@page "/servernodes"

@attribute [Authorize]

@implements IDisposable
@inject NamingService namingService
@inject IDialogService DialogService

<MudPaper Class="d-flex flex-grow-1 gap-4" Elevation="0">
    <MudText Typo="Typo.h6" GutterBottom="true">服务节点列表</MudText>
    <MudSpacer />
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Refresh" OnClick="@(Refresh)" />
</MudPaper>

<MudTable Items="@netNodeList" Dense="false" Hover="true" Bordered="false" Striped="false" Filter="new Func<NetNode,bool>(FilterFunc)">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>NodeId</MudTh>
        <MudTh>ServerId</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Ip</MudTh>
        <MudTh>TcpPort</MudTh>
        <MudTh>InnerTcpPort</MudTh>
        <MudTh>HttPort</MudTh>
        <MudTh>RpcPort</MudTh>
        <MudTh>处理Actor类型</MudTh>
        <MudTh>承载上限</MudTh>
        <MudTh>当前承载</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="NodeId">@context.NodeId</MudTd>
        <MudTd DataLabel="ServerId">@context.ServerId</MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="Ip">@context.Ip</MudTd>
        <MudTd DataLabel="TcpPort">@context.TcpPort</MudTd>
        <MudTd DataLabel="InnerTcpPort">@context.InnerTcpPort</MudTd>
        <MudTd DataLabel="HttpPort">@context.HttpPort</MudTd>
        <MudTd DataLabel="RpcPort">@context.RpcPort</MudTd>
        <MudTd DataLabel="处理Actor类型">@context.ActorTypesStr</MudTd>
        <MudTd DataLabel="承载上限">@context.State.MaxLoad</MudTd>
        <MudTd DataLabel="当前承载">@context.State.CurrentLoad</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    private string searchString = "";
    private List<NetNode> netNodeList = new List<NetNode>();
    Timer refreshTimer;

    protected override void OnInitialized()
    {
        netNodeList = namingService.GetAllNodes();
        refreshTimer = new Timer(new TimerCallback(_ =>
         {
             InvokeAsync(async () =>
             {
                 StateHasChanged();
             });
         }), null, 0, 1000);
    }

    private bool FilterFunc(NetNode item)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.NodeId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (item.ServerId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{item.Type} {item.Ip} {item.TcpPort} {item.InnerTcpPort} {item.HttpPort}".Contains(searchString))
            return true;
        return false;
    }

    private void Refresh()
    {
        netNodeList = namingService.GetAllNodes();
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        refreshTimer?.Dispose();
    }
}